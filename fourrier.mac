/*
 * (C) Dimiter Prodanov
 *
 * @version 0.7 Date 13 March 2014
 *
 * @author Dimiter Prodanov
 * 		  IMEC

 * @contents
 * This library computes Fourier and Fresnel transforms
 * 
 * 
 * @license This library is free software; you can redistribute it and/or
 *      modify it under the terms of the GNU Lesser General Public
 *      License as published by the Free Software Foundation; either
 *      version 2.1 of the License, or (at your option) any later version.
 *
 *      This library is distributed in the hope that it will be useful,
 *      but WITHOUT ANY WARRANTY; without even the implied warranty of
 *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *       Lesser General Public License for more details.
 *
 *      You should have received a copy of the GNU Lesser General Public
 *      License along with this library; if not, write to the Free Software
 *      Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

fourinfo([_package]):=
block(
	disp("package name: fourrier.mac (c)"),
	disp("author: Dimiter Prodanov"),
	disp("revision: 1.0"),
	disp("Recommended location: share/contrib"),
	disp("last update: Mar, 2014"),
	disp("")
)$

noundisp:true$

declare (FT, linear)$
declare (IFT, linear)$

/* comment must not precede :lisp due to bug in parser ... sigh. */
"transforms distribute over lists and equations" $

:lisp (setf (get '|$ft| 'distribute_over) '(mlist mequal))
:lisp (setf (get '|$ift| 'distribute_over) '(mlist mequal))

( "Basic FT IFT  rules",
matchdeclare([t, f], symbolp, x, true),
    defrule(ft_ift, FT(IFT(t)), t),
    defrule(ift_ft, IFT(FT(t)), t),
    defrule(ftc, FT(1), delta(f)),
    defrule(iftc, IFT(1), delta(t)),
    defrule(ft_main, FT(x), integrate(x*exp(-%i*2*%pi*f*t),t,-inf, inf )),
    defrule(ift_main, IFT(x), integrate(x*exp( %i*2*%pi*f*t),f,-inf, inf ))
)$

( "special functions",
matchdeclare([t, f], symbolp, [t0,  f0 ], constantp, T, atom, a, lambda([u], freeof(t,a) ) ),
    /* **   special functions
        */
    defrule(ft_delta, FT(delta(t)), 1),
    defrule(ft_delta1, FT(delta(t - t0)), exp(- 2*%pi*f*t0)),
    defrule(ift_delta, IFT(delta(f)), 1),
    defrule(ift_delta1, IFT(delta(f - f0)), exp( 2*%pi*f0*t)),
    defrule(ft_t, FT(t), -2* %pi* 1/(f^2) ), 
    defrule(ift_t,  IFT(1/(f^2)), -t/(2* %pi) ), 
    defrule(ft_rect, FT(rect(t, T)), 1/abs(T)*'sinc(f,1/T)),
    defrule(ift_rect, IFT(rect(f, T)), 1/abs(T)*'sinc(t,1/T)),
    defrule(ft_triang, FT(triang(t, T)), 1/abs(T)*('sinc(f,1/T))^2),
    defrule(ift_triang, IFT(triang(f, T)), 1/abs(T)*('sinc(t,1/T))^2),
    defrule(ft_step, FT(%step(t)), 1/(2*%i*%pi*f) +delta(f)),
    defrule(ft_signum, FT(signum(t)), 1/(2*%i *%pi*f) ),
    defrule(ift_signum, IFT (1/f), 2*%i * %pi*signum(t) ),
   
    defrule(ft_sinc, FT(sinc(t,T)), 1/abs(T) *'rect(f,1/T)),
    defrule(ift_sinc, IFT(sinc(f,T)), 1/abs(T) *'rect(t,1/T)),
    defrule(ft_sinc2, FT(sinc(t,T)^2), 1/abs(T) *'triang(f, 1/T)),
    
    defrule(ft_sin, FT(sin(t)), 1/(2*%i)*(delta(f - 1/(2*%pi)) -  delta(f + 1/(2*%pi))) ),
    defrule(ft_sin2, FT(sin(t^2)), -sqrt(%pi) *sin(%pi^2 *f^2 -%pi/4 ) ),
    defrule(ft_cos, FT(cos(t)), 1/(2)*(delta(f - 1/(2*%pi)) +  delta(f + 1/(2*%pi))) ),
    defrule(ft_cos2, FT(cos(t^2)), sqrt(%pi) *cos(%pi^2 *f^2 -%pi/4 ) )
)$

( "differentiation and integration",
matchdeclare([t, f], symbolp, g, true, n, atom, a, atom),
    defrule(ft_diff1, FT('diff(g(t), t,n)),  (%i*2*%pi*f)^n *FT(g(t)) ),
    defrule (ft_diff2, FT (t^n * g(t)), 1/(-%i*2*%pi)^n *'diff(FT(g),f,n)),
    defrule (ft_scale, FT (g(a*t)), 1/abs(a) * subst (f = f/a, FT (g(t))))
)$

("imaginary arguments",
 matchdeclare (t, symbolp, a, all),
 defrule (ft_ie, FT (exp (%i*t)), delta(f - 1/(2*%pi))),
 /* not sure about this next one; doesn't seem to match #303 in:
  * https://en.wikipedia.org/wiki/Fourier_transform#Distributions
  */
 defrule (ft_ie2, FT (exp (%i*a*t)), 1/abs(a) * delta (f - 1/a /(2*%pi)))
)$

/* assume FT rules are all named ftsomething.
 * extracting the list like this is maybe no more or less problematic
 * than maintaining it by hand.
 */
specific_FT_rules : sublist (rules, lambda ([a], smismatch ("ft", sconcat (a)) = 3 and a # 'ft_main));

/* Forward  Fourier trnsform */
ft (expr, t, f) :=
   (assume (f > 0),
    apply (apply1, cons (expr, specific_FT_rules)),
    apply1 (%%, ft_main),
    expand (ratsimp (%%)));

  /*  Bessel trnsform */
ftr(expr,r,f):=2*%pi*integrate(expr*bessel_j(0,2*%pi*f*r)*r,r,0,inf)$
 
specific_IFT_rules : sublist (rules, lambda ([a], smismatch ("ift", sconcat (a)) = 4 and a # 'ift_main));

 /* Inverse  Fourier trnsform */
ift (expr, f, t) :=
   (apply (apply1, cons (expr, specific_IFT_rules)),
    apply1 (%%, ift_main),
    ratsimp (%%));

matchdeclare (t, symbolp, T, all);
defrule (expand_rect, rect (t, T), if abs(t) <= T/2 then 1 else 0);
defrule (expand_triang, triang (t, T), if abs(t) <= T then 1 - abs(t)/T else 0);
defrule (expand_step, %step (t), if t >= 0 then 1 else 0);
defrule (expand_sinc, sinc (t, T), if t # 0 then %pi * sin (t * T * %pi) / (t*T) else 1);

/******* END ******************/
